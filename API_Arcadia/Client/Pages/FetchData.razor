@page "/fetchdata"
@using BlazorWasm.Shared
@using System.Text.Json;
@inject HttpClient Http

@attribute [Authorize]

<PageTitle>Test API Arcadia</PageTitle>

<h1>Test de l'API Arcadia</h1>

<p>Requête GET sur le point de terminaison <code>api/Animals/3</code></p>

@if (animal == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5>Résultat :</h5>

    <div class="d-flex flex-row flex-wrap align-content-center mx-auto">

        @foreach (Animal a in animal)
        {
            <div class="card m-2" style="width: 18rem;">
                <img src="@ImageSrc[a.Name]" class="card-img-top" alt="...">
                <div class="card-body">
                    <h4 class="card-title">@a.Name</h4>
                    <h6 class="card-title">@a.SpeciesData.Name</h6>
                    <p class="card-text"><em>@a.SpeciesData.ScientificName</em></p>
                    <a href="#" class="btn btn-primary">Modifier</a>
                </div>
            </div>
        }

@*         <div class="card m-2" style="width: 18rem;">
            <img src="@ImageSrc" class="card-img-top" alt="...">
            <div class="card-body">
                <h4 class="card-title">@animal.Name</h4>
                <h6 class="card-title">@animal.SpeciesData.Name</h6>
                <p class="card-text"><em>@animal.SpeciesData.ScientificName</em></p>
                <a href="#" class="btn btn-primary">Modifier</a>
            </div>
        </div> *@
    </div>

    @code {
    // private Animal[]? animal; // voir Arcadia/Models/Animal.cs

    // protected override async Task OnInitializedAsync()
    // {
    //     animal = await Http.GetFromJsonAsync<Animal[]>("/Animals");
    // }

    private Animal[]? animal; // voir Arcadia/Models/Animal.cs
    private Dictionary<string, string> ImageSrc = new();//faire un dictionnaire avec le nom de l'animal en clé et l'URL en value pour itérer sur tous les animaux

    protected override async Task OnInitializedAsync()
    {
        animal = await Http.GetFromJsonAsync<Animal[]>("/Animals");
        if (animal != null)
        {
            foreach (var a in animal)
            {
                ImageSrc.Add(a.Name, $"https://localhost:7015/{a.Pics[0].Slug}");
            }
        }



    }
}
}





@*
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
} *@
